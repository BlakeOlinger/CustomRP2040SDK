	** Atomic Register Access **

 * normal read/write
Addr + 0x0000

 * atomic XOR on write
Addr + 0x1000

 * atomic bitmask set on write
Addr + 0x2000

 * atomic bitmask clear on write
Addr + 0x3000


	** Bus Fabric Register List **
 * NOTE: all mnemonics are not mine but the official SDK

 * bus fabric registers start at a base address of:
0x40030000		BUSCTRL_BASE

 * BUS_PRIORITY -- set the priority of each master for bus arbitration (1 high, 0 low)
offset:
0x00

bits:										reset:		type:
31:13			reserved	
12			DMA_W		0 - low priority, 1 - high priority	0x0		RW
11:9			reserved
8			DMA_R		0 - low priority, 1 - high priority	0x0		RW
7:5			reserved
4			PROC1		0 - low priority, 1 - high priority 	0x0		RW
3:1			reserved
0			PROC0		0 - low priority, 1 - high priority	0x0		RW

 * BUS_PRIORITY_ACK -- bus priority acknowledge
offset:
0x04

bits:										reset:		type:
31:1			reserved
0					Is 1 once all arbiters have registered	0x0		RO
                                        new priority levels. Arbiters update
                                        when servicing a new nonsequential
                                        access. Normally, this will happen
                                        effectively immediately.

 * PERFCTR0 -- bus fabric performance counter 0
offset:
0x08

bits:										reset:		type:
31:24			reserved
23:0					count some event signal from the	0x0		WC
                                        busfabric arbtiers. Write any value
                                        to clear. Select an event to count
					with PERFSEL0.

 * PERFSEL0 -- bus fabric performance event select for PERFCTR0
offset:
0x0C

select an event for PERFCTR0. count either contested access, or all accessses,
on a downstream port of the main crossbar

bits:										reset:		type:
31:5			reserved
4:0			0x00		apb_contested				0x1F		RW
			0x01		apb
			0x02		fastperi_contested
			0x03		fastperi
			0x04		sram5_contested
			0x05		sram5
			0x06		sram4_contested
			0x07		sram4
			0x08		sram3_contested
			0x09		sram3
			0x0A		sram2_contested
			0x0B		sram2
			0x0C		sram1_contested
			0x0D		sram1
			0x0E		sram0_contested
			0x0F		sram0
			0x10		xip_main_contested
			0x11		xip_main
			0x12		rom_contested
			0x13		rom

 * PERFCTR1 -- see PERFCTR0
offset:
0x10

 * PERFSEL1 -- see PERFSEL0
offset:
0x14

 * PERFCTR2 -- see PERFCTR0
offset:
0x18

 * PERFSEL2 -- see PERFSEL0
offset:
0x1C

 * PERFCTR3 -- see PERFCTR0
offset:
0x20

 * PERFSEL3 -- see PERFSEL0
offset:
0x24

	** Address Map **

The address map is split into the following sections.
Unmapped address ranges raise a bus error when accessed.

section:			base address:
ROM				0x00000000
XIP				0x10000000
SRAM				0x20000000
APB Peripherals			0x40000000
AHB-Lite Peripherals		0x50000000
IOPORT Registers		0xD0000000
Cortex-M0+ internal registers	0xE0000000


 ** detailed view **

ROM:
ROM_BASE			0x00000000

XIP:
XIP_BASE			0x10000000
XIP_NOALLOC_BASE		0x11000000
XIP_NOCACHE_BASE		0x12000000
XIP_NOCACHE_NOALLOC_BASE	0x13000000
XIP_CTRL_BASE			0x14000000
XIP_SRAM_BASE			0x15000000
XIP_SRAM_END			0x15004000
XIP_SSI_BASE			0x18000000


SRAM. SRAM0-3 striped:
SRAM_BASE			0x20000000
SRAM_STRIPED_BASE		0x20000000
SRAM_STRIPED_END		0x20040000

SRAM 4-5 always non-striped:
SRAM4_BASE			0x20040000
SRAM5_BASE			0x20041000
SRAM_END			0x20042000

Non striped aliases of SRAM0-3:
SRAM0_BASE			0x21000000
SRAM1_BASE			0x21010000
SRAM2_BASE			0x21020000
SRAM3_BASE			0x21030000

APB Peripherals:
SYSINFO_BASE			0x40000000
SYSCFG_BASE			0x40004000
CLOCKS_BASE			0x40008000
RESETS_BASE			0x4000C000
PSM_BASE			0x40010000
IO_BANK0_BASE			0x40014000
IO_QSPI_BASE			0x40018000
PADS_BANK0_BASE			0x4001C000
PADS_QSPI_BASE			0x40020000
XOSC_BASE			0x40024000
PLL_SYS_BASE			0x40028000
PLL_USB_BASE			0x4002C000
BUSCTRL_BASE			0x40030000
UART0_BASE			0x40034000
UART1_BASE			0x40038000
SPI0_BASE			0x4003C000
SPI1_BASE			0x40040000
I2C0_BASE			0x40044000
I2C1_BASE			0x40048000
ADC_BASE			0x4004C000
PWM_BASE			0x40050000
TIMER_BASE			0x40054000
WATCHDOG_BASE			0x40058000
RTC_BASE			0x4005C000
ROSC_BASE			0x40060000
VREG_AND_CHIP_RESET_BASE	0x40064000
TBMAN_BASE			0x4006C000

AHB-Lite Peripherals:
DMA_BASE			0x50000000


USB has a DPRAM at its based followed by registers:
USBCTRL_BASE			0x50100000
USBCTRL_DPRAM_BASE		0x50100000
USBCTRL_REGS_BASE		0x50110000

Remaining AHB-Lite peripherals:
PIO0_BASE			0x50200000
PIO1_BASE			0x50300000
XIP_AUX_BASE			0x50400000

IOPORT peripherals:
SIO_BASE			0xD0000000
 -- word aligned addresses in range:
0xD0000000 - 0xD000017C 	-- SEE SIO_BASE detailed section

Cortex-M0+ internal peripherals
PPB_BASE			0xE0000000


	** SIO_BASE detailed **

SIO registers start at base address of 0xD0000000 (SIO_BASE)
through 0xD000017C

offset:			name:				info:
0x000			CPUID				processor core identifier
31:0			value is 0 when read from processor core 0,			RO
                        1 when read from processor core 1

0x004			GPIO_IN				input value for GPIO pins
31:30			reserved
29:0			input value for GPIO0-29					RO		0x00000000

0x008			GPIO_HI_IN			input value for QSPI pins
31:6			reserved
5:0			input value on QSPI IO in order 0-5:				RO		0x00
			SCLK, SSn, SD0, SD1, SD2, SD3

0x010			GPIO_OUT			GPIO output value
31:30			reserved
29:0			set output level (1/0, high/low) for GPIO0-29			RW		0x00000000
			reading back gives the last value written, NOT the input
			value from the pins.
			If core 0 and core 1 both write to GPIO_OUT simultaneously
			(or to a SET/CLR/XOR alias), the result is as though the
			write from core 0 took place first, and the write from
			core 1 was then applied to that intermediate result

0x014			GPIO_OUT_SET			GPIO output value set
31:30			reserved
29:0			perform an atomic bit-set on GPIO_OUT				WO		0x00000000

0x018			GPIO_OUT_CLR			GPIO output value clear
31:30			reserved
29:0			perform an atomic bit-clear on GPIO_OUT				WO		0x00000000

0x01C			GPIO_OUT_XOR			GPIO output value XOR
31:30			reserved
29:0			perform an atomic bitwise XOR on GPIO_OUT			WO		0x00000000

0x020			GPIO_OE				GPIO output enable
31:30			reserved
29:0			set output enable (1/0, output/input) for GPIO0-29
			reading back gives the last value written
			if core 0 and core 1 both write to GPIO_OE simultaneously
			(or to a SET/CLR/XOR alias), the result is as though the
			write from core 0 took place first, then the write from
			core 1 was applied to teh intermediate result

0x024			GPIO_OE_SET			GPIO output enable set
31:30			reserved
29:0			atomic bit-set on GPIO_OE					WO		0x00000000

0x028			GPIO_OE_CLR			GPIO output enable clear
31:30			reserved
29:0			atomic bit-clear on GPIO_OE					WO		0x00000000

0x02C			GPIO_OE_XOR			GPIO output enable XOR
31:30			reserved
29:0			atomic bitwise XOR on GPIO_OE					WO		0x00000000	

0x030			GPIO_HI_OUT			QSPI output value
31:6			reserved
5:0			set output level (1/0, high/low) for QSPI IO0-5			RW		0x00 (5:0)
			reading back gives the last value written, NOT the input
			value from the pins
			if core 0 and core 1 both write to GPIO_HI_OUT simultaneously
			(or to an alias via SET/CLR/XOR), the result is as though
			the write from core 0 took place first, then the write from
			core 1 was applied to that intermediate result

0x034			GPIO_HI_OUT_SET			QSPI output value set
31:6			reserved
5:0			atomic bit-set on GPIO_HI_OUT					WO		0x00 (5:0)

0x038			GPIO_HI_OUT_CLR			QSPI output value clear
31:6			reserved
5:0			atomic bit-clear on GPIO_HI_OUT					WO		0x00

0x03C			GPIO_HI_OUT_XOR			QSPI output value XOR
31:6			reserved
5:0			atomic bitwise XOR on GPIO_HI_OUT				WO		0x00

0x040			GPIO_HI_OE			QSPI output enable
31:6			reserved
5:0			set output enable (1/0, output/input) for QSPI IO0-5		RW		0x00
			reading back gives the last value written
			if core 0 and 1 both write to GPIO_HI_OE simultaneously
			(or to an alias, SET/CLR/XOR), the result is as though
			core 0 writes first then core 1

0x044			GPIO_HI_OE_SET			QSPI output enable set
31:6			reserved
5:0			atomic bit-set on GPIO_HI_OE					WO		0x00

0x048			GPIO_HI_OE_CLR			QSPI output enable clear
31:6			reserved
5:0			atomic bit-clear on GPIO_HI_OE					WO		0x00

0x04C			GPIO_HI_OE_XOR			QSPI output enable XOR
31:6			reserved
5:0			atomic bitwise XOR on GPIO_HI_OE				WO		0x00

0x050			FIFO_ST				status register for inter-core FIFOs (mailboxes)
NOTES:			there is one FIFO in the core 0 to core 1 direction, and one for the core 1 to core 0 direction
			both are 32 bits wide and 8 words deep
			core 0 can see the read side of 1 -> 0 FIFO (RX), and the write side of 0 -> 1 FIFO (TX)
			core 1 can see the read side of 0 -> 1 FIFO (RX), and the write side of 1 -> 0 FIFO (TX)
			the SIO IRQ for each core is the logical OR of the VLD, WOF, ROE fields of the FIFO_ST register
31:4			reserved
3			ROE				sticky flag indicating the RX	WC		0x0
							FIFO was read when empty
							this read was ignored by the 
							FIFO
2			WOF				sticky flag indicating the TX 	WC		0x0
							FIFO was written when full
							this write was ignored by the
							FIFO
1			RDY				values is 1 if this core's TX 	RO		0x1
							FIFO is not full, for example:
							if FIFO_WR is ready for more
							data
0			VLD				value is 1 if this core's RX	RO		0x0
							FIFO is not empty, example:
							FIFO_RD is valid

0x054			FIFO_WR				write access to this core's TX FIFO
31:0			write access to this core's TX FIFO				WF		0x00000000

0x058			FIFO_RD				read access to this core's RX FIFO
31:0			read access to this core's RX FIFO				RF		0x00000000

0x05C			SPINLOCK_ST			spinlock state
31:0			a bitmap containing the state of all 32 spinlocks		RO		0x00000000
			1 == locked
			mainly intended for debugging

0x060			DIV_UDIVIDEND			divider unsigned dividend
31:0			write to the DIVIDEND operand of the divider:			RW		0x000000000
			p in (p / q)
			any operand write starts a new calculation
			the results appear in QUOTIENT and REMAINDER
			UDIVIDEND/SDIVIDEND are aliases of the same internal register
			the U alias starts an unsigned calculation
			the S alias starts a signed calculation

0x064			DIV_UDIVISOR			divider unsigned divisor
31:0			write to the DIVISOR operand of the divider			RW		0x000000000
			q in (p / q)

0x068			DIV_SDIVIDEND			divider signed dividend
31:0			the same as UDIVIDEND						RW		0x00000000
			but starts a signed calculation

0x06C			DIV_SDIVISOR			divider signed divisor
31:0			the same as UDIVISOR						RW		0x00000000
			but starts a signed calculation

0x070			DIV_QUOTIENT			divider result quotient
31:0			the result of (DIVIDEND / DIVISOR) (division)			RW		0x00000000
			contents undefined while CSR_READY is low
			for signed calculations:
			QUOTIENT is negative when the signs of DIVIDEND and
			DIVISOR differ
			this register can be written to directly, for context
			save/restore purposes. this halts any in-progress
			calculation and sets the CSR_READY and CSR_DIRTY flags
			reading from QUOTIENT clears the CSR_DIRTY flag, meaning
			should read results in the order:
			REMAINDER, QUOTIENT if CSR_DIRTY is used

0x074			DIV_REMAINDER			divider result remainder
31:0			the result of DIVIDEND % DIVISOR (modulo)			RW		0x00000000
			contents undefined while CSR_READY is low
			for signed calculations:
			REMAINDER is negative only when DIVIDEND is negative
			this register can be written to directly, for context
			save/restore purposes, this halts any in-progress
			calculation and sets the CSR_READY and CSR_DIRTY flags

0x078			DIV_CSR				divider control and status register
0x080			INTERP0_ACCUM0			read/write access to accumulator 0
0x084			INTERP0_ACCUM1			read/write access to accumulator 1
0x088			INTERP0_BASE0			read/write access to BASE0 register
0x08C			INTERP0_BASE1			read/write access to BASE1 register
0x090			INTERP0_BASE2			read/write access to BASE2 register
0x094			INTERP0_POP_LANE0		read LANE0 result, and simultaneously write lane results to both accumulators (POP)
0x098			INTERP0_POP_LANE1		read LANE1 result, and simultaneously write lane results to both accumulators (POP)
0x09C			INTERP0_POP_FULL		read FULL result, and simultaneously write lane results to both accumulators (POP)
0x0A0			INTERP0_PEEK_LANE0		read LANE0 result, without altering any internal state (PEEK)
0x0A4			INTERP0_PEEK_LANE1		read LANE1 result, without altering any internal state (PEEK)
0x0A8			INTERP0_PEEK_FULL		read FULL result, without altering any internal state (PEEK)
0x0AC			INTERP0_CTRL_LANE0		control register for lane 0
0x0B0			INTERP0_CTRL_LANE1		control register for lane 1
0x0B4			INTERP0_ACCUM0_ADD		values written here are atomically added to ACCUM0
0x0B8			INTERP0_ACCUM1_ADD		values written here are atomically added to ACCUM1
0x0BC			INTERP0_BASE_1AND0		on write, the lower 16 bits go to BASE0, upper bits to BASE1 simultaneously
0x0C0			INTERP1_ACCUM0			read/write access to accumulator 0
0x0C4			INTERP1_ACCUM1			read/write access to accumulator 1
0x0C8			INTERP1_BASE0			read/write access to BASE0 register
0x0CC			INTERP1_BASE1			read/write access to BASE1 register
0x0D0			INTERP1_BASE2			read/write access to BASE2 register
0x0D4			INTERP1_POP_LANE0		read LANE0 result, and simultaneously write lane results to both accumulators (POP)
0x0D8			INTERP1_POP_LANE1		read LANE1 result, and simultaneously write lane results to both accumulators (POP)
0x0DC			INTERP1_POP_FULL		read FULL result, and simultaneously write lane results to both accumulators (POP)
0x0E0			INTERP1_PEEK_LANE0		read LANE0 result without altering any internal state (PEEK)
0x0E4			INTERP1_PEEK_LANE1		read LANE1 result without altering any internal state (PEEK)
0x0E8			INTERP1_PEEK_FULL		read FULL without altering any internal state (PEEK)
0x0EC			INTERP1_CTRL_LANE0		control register for lane 0
0x0F0			INTERP1_CTRL_LANE1		control register for lane 1
0x0F4			INTERP1_ACCUM0_ADD		values written here are atomically added to ACCUM0
0x0F8			INTERP1_ACCUM1_ADD		values written here are atomically added to ACCUM1
0x0FC			INTERP1_BASE_1AND0		on write, the lower 16 bits go to BASE0, upper bits to BASE1 simultaneously
0x100			SPINLOCK0			spinlock register 0
0x104			SPINLOCK1			spinlock register 1
0x108			SPINLOCK2			spinlock register 2
0x10C			SPINLOCK3			spinlock register 3
0x110			SPINLOCK4			spinlock register 4
0x114			SPINLOCK5			spinlock register 5
0x118			SPINLOCK6			spinlock register 6
0x11C			SPINLOCK7			spinlock register 7
0x120			SPINLOCK8			spinlock register 8
0x124			SPINLOCK9			spinlock register 9
0x128			SPINLOCK10			spinlock register 10
0x12C			SPINLOCK11			spinlock register 11
0x130			SPINLOCK12			spinlock register 12
0x134			SPINLOCK13			spinlock register 13
0x138			SPINLOCK14			spinlock register 14
0x13C			SPINLOCK15			spinlock register 15
0x140			SPINLOCK16			spinlock register 16
0x144			SPINLOCK17			spinlock register 17
0x148			SPINLOCK18			spinlock register 18
0x14C			SPINLOCK19			spinlock register 19
0x150			SPINLOCK20			spinlock register 20
0x154			SPINLOCK21			spinlock register 21
0x158			SPINLOCK22			spinlock register 22
0x15C			SPINLOCK23			spinlock register 23
0x160			SPINLOCK24			spinlock register 24
0x164			SPINLOCK25			spinlock register 25
0x168			SPINLOCK26			spinlock register 26
0x16C			SPINLOCK27			spinlock register 27
0x170			SPINLOCK28			spinlock register 28
0x174			SPINLOCK29			spinlock register 29
0x178			SPINLOCK30			spinlock register 30
0x17C			SPINLOCK31			spinlock register 31
